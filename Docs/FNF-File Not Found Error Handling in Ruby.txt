As a user, which error message would you rather see?...

Example A -- The "default" error traceback in Ruby, the result of an unhandled
             (by the program/mer) "file not found" condition?  There's useful
             information here for the programmer (see esp. the Errno::ENOENT),
             but not so much for the (non-programmer) user.

$ wordfrequencies fooxtroot.txt
/home/lorin/bin/wordfrequencies:73:in `initialize': No such file or directory
@ rb_sysopen - fooxtroot.txt (Errno::ENOENT)
  from /home/lorin/bin/wordfrequencies:73:in `open'
  from /home/lorin/bin/wordfrequencies:73:in `process'
  from /home/lorin/bin/wordfrequencies:162:in `<main>'

...or?...
Example B -- The programmer has now trapped the Errno::ENOENT exception and has
             "rescued" that condition, handling it with a more meaningful error
             message (for the user) and a graceful program exit (following the
             principle of "fail early")?

$ wordfrequencies fooxtroot.txt
%wordfrequencies-e-fnf, error opening input file 'fooxtroot.txt'

For example, given a straightforward text-file processing loop like this:

  def process( inputf, outf )
    File.open( inputf ? inputf : STDINFD, "r") do | inf |
      while line = inf.gets
        line = line.chomp
        next if line.lstrip == ''
        # Process each input line here...
      end
    end
    return
  end

...Thus, if the parameter 'inputf' gets a filename value like "./foobar.txt",
and the file ./foobar.txt itself does not exist, then the error message hairball
shown in Example A above will result.  Ruby's File.open() cannot find the file.

Imposing a rescue clause into the method is headed in the right direction:

  def process( inputf, outf )
    File.open( inputf ? inputf : STDINFD, "r") do | inf |
      while line = inf.gets
        line = line.chomp
        next if line.lstrip == ''
        # Process each input line here...
      end
    end
    return
  rescue IOError => e
    STDERR.puts "%#{PROGNAME}-e-fnf, error opening input file '#{inputf}'"
    exit false
  end

But this doesn't quite work right... Although a File.open() against a non-
existent file would seem to generate an "IOError" exception, another test-try
to open the non-existent ./foobar.txt generates the same generic error message
hairball as the first version of this method did.

But File.open() doesn't raise the IOError exception. Instead, it propagates the
operating system's (Linux) Status Code (which is mapped by Module Errno to a
Ruby sub-class of the SystemCallError), so Errno::ENOENT, error "No Such Entity
(file or directory)", is the correct exception to rescue, thus...

  def process( inputf, outf )
    File.open( inputf ? inputf : STDINFD, "r") do | inf |
      while line = inf.gets
        line = line.chomp
        next if line.lstrip == ''
        # Process each input line here...
      end
    end
    return
  rescue Errno::ENOENT => e
    STDERR.puts "%#{PROGNAME}-e-fnf, error opening input file '#{inputf}'"
    exit false
  end

Now the attempt to File.open() a non-existent ./foobar.txt will:  a) raise the
Errno::ENOENT exception, which is b) handled by the rescue clause, which then
c) writes out a simple, user-comprehensible error message to STDERR, and which
then forces the program to exit.
